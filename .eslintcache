[{"/Users/hauhuynh/Desktop/sample-web3/src/index.js":"1","/Users/hauhuynh/Desktop/sample-web3/src/reportWebVitals.js":"2","/Users/hauhuynh/Desktop/sample-web3/src/App.jsx":"3","/Users/hauhuynh/Desktop/sample-web3/src/context/Web3Context.js":"4","/Users/hauhuynh/Desktop/sample-web3/src/context/AppContext.js":"5","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/index.jsx":"6","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/index.jsx":"7","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/index.jsx":"8","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceWallet.jsx":"9","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceToken.jsx":"10","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/components/TransferForm/index.jsx":"11","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/components/Transaction/index.jsx":"12"},{"size":535,"mtime":1652255686470,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1652255686471,"results":"15","hashOfConfig":"14"},{"size":886,"mtime":1652264306344,"results":"16","hashOfConfig":"14"},{"size":3079,"mtime":1652778749700,"results":"17","hashOfConfig":"14"},{"size":419,"mtime":1652257029480,"results":"18","hashOfConfig":"14"},{"size":1857,"mtime":1652776966225,"results":"19","hashOfConfig":"14"},{"size":907,"mtime":1652778749702,"results":"20","hashOfConfig":"14"},{"size":357,"mtime":1652776966224,"results":"21","hashOfConfig":"14"},{"size":750,"mtime":1652778749700,"results":"22","hashOfConfig":"14"},{"size":1320,"mtime":1652778749700,"results":"23","hashOfConfig":"14"},{"size":3072,"mtime":1652778749700,"results":"24","hashOfConfig":"14"},{"size":2199,"mtime":1652778749700,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1eb3gfw",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/Users/hauhuynh/Desktop/sample-web3/src/index.js",[],["57","58"],"/Users/hauhuynh/Desktop/sample-web3/src/reportWebVitals.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/App.jsx",[],"/Users/hauhuynh/Desktop/sample-web3/src/context/Web3Context.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/context/AppContext.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/index.jsx",["59","60","61"],"import React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Box } from '@mantine/core';\nimport Web3Context from '../../context/Web3Context';\nimport Balance from './components/Balance';\nimport Transfering from './components/Transfering/';\nimport { Divider, Card, Space } from 'antd'\n\nconst Metamask = ({ style }) => {\n    const { currentAccount, connectWallet, loading } = useContext(Web3Context);\n\n    const renderContent = () => {\n        if (currentAccount) {\n            return (\n                <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                    <Box\n                        sx={(theme) => ({\n                            backgroundColor: theme.colors.green[2],\n                            color: theme.colors.gray[9],\n                            textAlign: 'center',\n                            padding: theme.spacing.sm,\n                            borderRadius: theme.radius.sm,\n                        })}\n                    >\n                        Connected: {currentAccount}\n                    </Box>\n                    {currentAccount !== null && (\n                        <>\n                            <Card>\n                                <Balance currentAccount={currentAccount} />\n                                <Divider />\n                                <Transfering currentAccount={currentAccount} />\n                            </Card>\n                        </>\n                    )}\n\n\n\n\n\n                </Space>\n            );\n\n        } else {\n            return (\n                <Button onClick={connectWallet} fullWidth='true' disabled={loading}>\n                    Connect Wallet\n                </Button>\n            );\n        }\n    };\n\n    return <div style={style}>{renderContent()}</div>;\n};\n\nexport default Metamask;\n","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/index.jsx",["62","63"],"import React, { useEffect, useState } from 'react';\nimport { Tabs } from 'antd'\nimport TransferForm from './components/TransferForm';\nimport Transaction from './components/Transaction';\nconst Transfering = ({ currentAccount }) => {\n\n    return (\n        <>\n            <Tabs defaultActiveKey=\"1\" onChange={null}>\n                <Tabs.TabPane tab=\"Native Transfer\" key=\"1\">\n                    <TransferForm transferType=\"native\" currentAccount={currentAccount} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"ERC-20 Transfer\" key=\"2\">\n                    <TransferForm transferType=\"erc20\" currentAccount={currentAccount} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Transaction\" key=\"3\">\n                    <Transaction currentAccount={currentAccount}/>\n                </Tabs.TabPane>\n            </Tabs>\n        </>\n    );\n};\n\nexport default Transfering;\n","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/index.jsx",[],"/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceWallet.jsx",["64"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nconst BalanceWallet = ({ currentAccount }) => {\n    const [balance, setBalance] = useState();\n\n    useEffect(() => {\n        const getBalance = async (address) => {\n            const myWeb3 = new Web3(window.ethereum);\n            try {\n                myWeb3.eth.getBalance(address).then(result => setBalance(result / (10 ** 18)));\n            } catch (err) {\n                console.log(err)\n            }\n        }\n        getBalance(currentAccount)\n    }, [])\n\n    const renderContent = () => {\n        return (\n            <div> Balance: {balance && `${balance} ETH`}</div>\n        );\n    };\n\n    return <div >{renderContent()}</div>;\n};\n\nexport default BalanceWallet","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceToken.jsx",["65"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport minABI from '../../../../../abi/sample.json'\n\nconst tokenAddress = \"0x13512979ADE267AB5100878E2e0f485B568328a4\"; //USDT\n\n\nconst BalanceToken = ({ currentAccount }) => {\n    const [balance, setBalance] = useState(null);\n    const [symbol, setSymbol] = useState(null);\n\n    useEffect(() => {\n        const getBalance = async () => {\n            try {\n                const myWeb3 = new Web3(window.ethereum);\n                let contract = new myWeb3.eth.Contract(minABI, tokenAddress);\n                let bal = await contract.methods.balanceOf(currentAccount).call();\n                let sym = await contract.methods.symbol().call();\n                return { bal, sym };\n            }\n            catch (err) {\n                console.log(err)\n                return { bal: null, sym: null }\n            }\n        }\n        getBalance().then(function (result) {\n            const { bal, sym } = result\n            setBalance(bal)\n            setSymbol(sym)\n        });\n    }, [])\n\n    const renderContent = () => {\n        return (\n            <>     {balance && (\n                <div>Balance Token: {balance} {symbol}</div>)}\n            </>\n        );\n    };\n\n    return <div >{renderContent()}</div>;\n};\n\nexport default BalanceToken","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/components/TransferForm/index.jsx",["66","67","68","69","70"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport minABI from '../../../../../../abi/sample.json'\nimport { Input, Button, Form, Tabs, Card } from 'antd'\nimport BigNumber from 'bignumber.js'\nconst tokenAddress = \"0x13512979ADE267AB5100878E2e0f485B568328a4\";\n\nconst TransferForm = ({ transferType, currentAccount }) => {\n\n    const sendNative = async (from, to, value) => {\n        try {\n            const myWeb3 = new Web3(window.ethereum);\n            myWeb3.eth.sendTransaction({ from: from, to: to, value: myWeb3.utils.toWei(value.toString()) })\n                .then(result => {\n                    console.log(result);\n                });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n\n    const sendErc20 = async (data) => {\n        try {\n            const myWeb3 = new Web3(window.ethereum);\n            const contract = new myWeb3.eth.Contract(minABI, data.contractAddress);\n            const decimals = await contract.methods.decimals().call();\n            const amount = new BigNumber(data.value).multipliedBy(BigNumber(10).pow(decimals));\n            contract.methods.transfer(data.to, amount).send({ from: data.from })\n                .on('transactionHash', function (hash) {\n                    console.log(hash);\n                });\n            return null;\n        }\n        catch (err) {\n            console.log(err);\n        }\n    }\n\n    const transfer = (value) => {\n        //0xd9A3f6930DE4e246627710cF4D6c74f42825a0b4\n        //123321123321000\n\n        if (transferType === 'native') {\n            sendNative(currentAccount, value.receiverAddress, value.amount);\n        } else if (transferType === 'erc20') {\n            sendErc20({ from: currentAccount, to: value.receiverAddress, value: Number(value.amount), contractAddress: value.contractAddress });\n        }\n    }\n\n    return (\n        <Form\n            name={transferType}\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 14 }}\n            onFinish={transfer}\n        >\n            <Form.Item\n                label=\"Receiver Address\"\n                name=\"receiverAddress\"\n                rules={[{ required: true, message: 'Please input receiver address!' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Amount\"\n                name=\"amount\"\n                rules={[{ required: true, message: 'Please input amount!' }]}\n            >\n                <Input />\n            </Form.Item>\n            {transferType === 'erc20' && (\n                <Form.Item\n                    label=\"Contract Address\"\n                    name=\"contractAddress\"\n                    rules={[{ required: true, message: 'Please input contract address!' }]}>\n                    <Input />\n                </Form.Item>)}\n            <Form.Item wrapperCol={{ offset: 4, span: 16 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n};\n\nexport default TransferForm;\n","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/components/Transaction/index.jsx",["71","72"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nconst Transaction = ({ currentAccount }) => {\n\n    useEffect(() => {\n\n        const getTransaction = async (address) => {\n            const myWeb3 = new Web3(window.ethereum);\n            // myWeb3.eth.getTransactionCount(currentAccount).then(console.log)\n            // const test = '0x47beec5f5bfe354a6717a9d44dc8a7f21c1c0c3ee355f6e4c461226949cbe19f'\n            // myWeb3.eth.getTransactionReceipt(test).then(console.log)\n            let block = await myWeb3.eth.getBlock('latest');\n            let transactions = block.transactions;\n            // console.log('Search Block: ' + transactions);\n            if (block != null && transactions != null) {\n                for (let txHash of transactions) {\n                    let tx = await myWeb3.eth.getTransaction(txHash);\n                         console.log(txHash)\n                        console.log(\"from: \" + tx.from.toLowerCase() + \" to: \" + tx.to.toLowerCase() + \" value: \" + tx.value);\n                    \n                }\n            }\n\n        }\n        getTransaction(currentAccount)\n\n\n        // try {\n        //     const myWeb3 = new Web3(window.ethereum);\n        //     myWeb3.eth.getTransactionCount(currentAccount).then((b = console.log) => {\n        //         console.log(b)\n        //         for (var i = 0; i < b; i++) {\n        //             myWeb3.eth.getBlock(b - i).then((Block) => {\n        //               let  a = [\n        //                     Block.hash\n        //                 ]\n        //                 console.log(a);\n        //                 var iterator = a.values()\n        //                 for (let elements of iterator) {\n        //                     myWeb3.eth.getTransactionFromBlock(elements).then(console.log)\n        //                 }\n        //             });\n        //         }\n        //     });\n        // } catch (err) {\n        //     console.log(err)\n        // }\n   \n    }, [])\n\n\n\nconst renderContent = () => {\n    return (\n        <></>\n        // <div> Balance: {balance && `${balance} ETH`}</div>\n    );\n};\n\nreturn <div >{renderContent()}</div>;\n};\n\nexport default React.memo(Transaction)",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":29,"nodeType":"79","messageId":"80","endLine":1,"endColumn":38},{"ruleId":"77","severity":1,"message":"81","line":1,"column":40,"nodeType":"79","messageId":"80","endLine":1,"endColumn":48},{"ruleId":"77","severity":1,"message":"82","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"81","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"84","line":17,"column":8,"nodeType":"85","endLine":17,"endColumn":10,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"84","line":31,"column":8,"nodeType":"85","endLine":31,"endColumn":10,"suggestions":"87"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"81","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"88","line":4,"column":31,"nodeType":"79","messageId":"80","endLine":4,"endColumn":35},{"ruleId":"77","severity":1,"message":"89","line":4,"column":37,"nodeType":"79","messageId":"80","endLine":4,"endColumn":41},{"ruleId":"77","severity":1,"message":"90","line":6,"column":7,"nodeType":"79","messageId":"80","endLine":6,"endColumn":19},{"ruleId":"77","severity":1,"message":"81","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"84","line":50,"column":8,"nodeType":"85","endLine":50,"endColumn":10,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'PropTypes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentAccount'. Either include it or remove the dependency array.","ArrayExpression",["94"],["95"],"'Tabs' is defined but never used.","'Card' is defined but never used.","'tokenAddress' is assigned a value but never used.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},{"desc":"97","fix":"100"},"Update the dependencies array to be: [currentAccount]",{"range":"101","text":"102"},{"range":"103","text":"102"},{"range":"104","text":"102"},[538,540],"[currentAccount]",[1060,1062],[1982,1984]]