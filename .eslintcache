[{"/Users/hauhuynh/Desktop/sample-web3/src/index.js":"1","/Users/hauhuynh/Desktop/sample-web3/src/reportWebVitals.js":"2","/Users/hauhuynh/Desktop/sample-web3/src/App.jsx":"3","/Users/hauhuynh/Desktop/sample-web3/src/context/Web3Context.js":"4","/Users/hauhuynh/Desktop/sample-web3/src/context/AppContext.js":"5","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/index.jsx":"6","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/index.jsx":"7","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/index.jsx":"8","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceWallet.jsx":"9","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceToken.jsx":"10","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/components/TransferForm/index.jsx":"11"},{"size":535,"mtime":1652255686470,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1652255686471,"results":"14","hashOfConfig":"13"},{"size":886,"mtime":1652264306344,"results":"15","hashOfConfig":"13"},{"size":3071,"mtime":1652776743113,"results":"16","hashOfConfig":"13"},{"size":419,"mtime":1652257029480,"results":"17","hashOfConfig":"13"},{"size":1857,"mtime":1652776966225,"results":"18","hashOfConfig":"13"},{"size":825,"mtime":1652776966224,"results":"19","hashOfConfig":"13"},{"size":357,"mtime":1652776966224,"results":"20","hashOfConfig":"13"},{"size":771,"mtime":1652776966223,"results":"21","hashOfConfig":"13"},{"size":1147,"mtime":1652776966223,"results":"22","hashOfConfig":"13"},{"size":2092,"mtime":1652776966224,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eb3gfw",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/Users/hauhuynh/Desktop/sample-web3/src/index.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/reportWebVitals.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/App.jsx",[],"/Users/hauhuynh/Desktop/sample-web3/src/context/Web3Context.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/context/AppContext.js",[],"/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/index.jsx",["51","52","53"],"import React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Box } from '@mantine/core';\nimport Web3Context from '../../context/Web3Context';\nimport Balance from './components/Balance';\nimport Transfering from './components/Transfering/';\nimport { Divider, Card, Space } from 'antd'\n\nconst Metamask = ({ style }) => {\n    const { currentAccount, connectWallet, loading } = useContext(Web3Context);\n\n    const renderContent = () => {\n        if (currentAccount) {\n            return (\n                <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                    <Box\n                        sx={(theme) => ({\n                            backgroundColor: theme.colors.green[2],\n                            color: theme.colors.gray[9],\n                            textAlign: 'center',\n                            padding: theme.spacing.sm,\n                            borderRadius: theme.radius.sm,\n                        })}\n                    >\n                        Connected: {currentAccount}\n                    </Box>\n                    {currentAccount !== null && (\n                        <>\n                            <Card>\n                                <Balance currentAccount={currentAccount} />\n                                <Divider />\n                                <Transfering currentAccount={currentAccount} />\n                            </Card>\n                        </>\n                    )}\n\n\n\n\n\n                </Space>\n            );\n\n        } else {\n            return (\n                <Button onClick={connectWallet} fullWidth='true' disabled={loading}>\n                    Connect Wallet\n                </Button>\n            );\n        }\n    };\n\n    return <div style={style}>{renderContent()}</div>;\n};\n\nexport default Metamask;\n","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/index.jsx",["54","55"],"import React, { useEffect, useState } from 'react';\nimport { Tabs } from 'antd'\nimport TransferForm from './components/TransferForm';\n\nconst Transfering = ({ currentAccount }) => {\n\n    return (\n        <>\n            <Tabs defaultActiveKey=\"1\" onChange={null}>\n                <Tabs.TabPane tab=\"Native Transfer\" key=\"1\">\n                    <TransferForm transferType=\"native\" currentAccount={currentAccount} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"ERC-20 Transfer\" key=\"2\">\n                    <TransferForm transferType=\"erc20\" currentAccount={currentAccount} />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Tab 3\" key=\"3\">\n                    Content of Tab Pane 3\n                </Tabs.TabPane>\n            </Tabs>\n        </>\n    );\n};\n\nexport default Transfering;\n","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/index.jsx",[],"/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceWallet.jsx",["56"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nconst BalanceWallet = ({ currentAccount }) => {\n    const [balance, setBalance] = useState();\n\n    useEffect(() => {\n        const getBalance = async (address) => {\n            const myWeb3 = new Web3(window.ethereum);\n            try {\n                myWeb3.eth.getBalance(address)\n                    .then(result => setBalance(result / (10 ** 18)));\n            } catch (err) {\n                console.log(err)\n            }\n        }\n        getBalance(currentAccount)\n    }, [])\n\n    const renderContent = () => {\n        return (\n            <div> Balance: {balance && `${balance} ETH`}</div>\n        );\n    };\n\n    return <div >{renderContent()}</div>;\n};\n\nexport default BalanceWallet","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Balance/components/BalanceToken.jsx",["57"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport minABI from '../../../../../abi/sample.json'\n\nconst tokenAddress = \"0x13512979ADE267AB5100878E2e0f485B568328a4\"; //USDT\n\n\nconst BalanceToken = ({ currentAccount }) => {\n    const [balance, setBalance] = useState(null);\n    const [symbol, setSymbol] = useState(null);\n\n    useEffect(() => {\n        const getBalance = async () => {\n            const myWeb3 = new Web3(window.ethereum);\n            let contract = new myWeb3.eth.Contract(minABI, tokenAddress);\n            let bal = await contract.methods.balanceOf(currentAccount).call();\n            let sym = await contract.methods.symbol().call();\n            return { bal, sym };\n        }\n        getBalance().then(function (result) {\n            const { bal, sym } = result\n            setBalance(bal)\n            setSymbol(sym)\n        });\n    }, [])\n\n    const renderContent = () => {\n        return (\n            <>     {balance && (\n                <div>Balance Token: {balance} {symbol}</div>)}\n            </>\n        );\n    };\n\n    return <div >{renderContent()}</div>;\n};\n\nexport default BalanceToken","/Users/hauhuynh/Desktop/sample-web3/src/pages/Metamask/components/Transfering/components/TransferForm/index.jsx",["58","59","60","61","62","63"],"import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport minABI from '../../../../../../abi/sample.json'\nimport { Input, Button, Form, Tabs, Card } from 'antd'\nconst tokenAddress = \"0x13512979ADE267AB5100878E2e0f485B568328a4\";\n\nconst TransferForm = ({ transferType, currentAccount}) => {\n\n    const send = async (data) => {\n        console.log(data)\n        const myWeb3 = new Web3(window.ethereum);\n        try {\n            myWeb3.eth.sendTransaction(data)\n                .then(result => {\n                    console.log(result)\n                });\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    const transfer = (value) => {\n        //0xd9A3f6930DE4e246627710cF4D6c74f42825a0b4\n        //123321123321000\n        send({ from: currentAccount, to: value.receiverAddress, value: value.amount * (10 ** 18) })\n    }\n\n    return (\n        <Form\n            name={transferType}\n            labelCol={{ span: 6 }}\n            wrapperCol={{ span: 14 }}\n            onFinish={transfer}\n        >\n            <Form.Item\n                label=\"Receiver Address\"\n                name=\"receiverAddress\"\n                rules={[{ required: true, message: 'Please input receiver address!' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Amount\"\n                name=\"amount\"\n                rules={[{ required: true, message: 'Please input amount!' }]}\n            >\n                <Input />\n            </Form.Item>\n            {transferType === 'erc20' && (\n                <Form.Item\n                    label=\"Contract Address\"\n                    name=\"contractAddress\"\n                    rules={[{ required: true, message: 'Please input contract address!' }]}>\n                    <Input />\n                </Form.Item>)}\n            <Form.Item wrapperCol={{ offset: 4, span: 16 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n};\n\nexport default TransferForm;\n",{"ruleId":"64","severity":1,"message":"65","line":1,"column":29,"nodeType":"66","messageId":"67","endLine":1,"endColumn":38},{"ruleId":"64","severity":1,"message":"68","line":1,"column":40,"nodeType":"66","messageId":"67","endLine":1,"endColumn":48},{"ruleId":"64","severity":1,"message":"69","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":17},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"68","line":1,"column":28,"nodeType":"66","messageId":"67","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"71","line":18,"column":8,"nodeType":"72","endLine":18,"endColumn":10,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"71","line":25,"column":8,"nodeType":"72","endLine":25,"endColumn":10,"suggestions":"74"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"68","line":1,"column":28,"nodeType":"66","messageId":"67","endLine":1,"endColumn":36},{"ruleId":"64","severity":1,"message":"75","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":14},{"ruleId":"64","severity":1,"message":"76","line":4,"column":31,"nodeType":"66","messageId":"67","endLine":4,"endColumn":35},{"ruleId":"64","severity":1,"message":"77","line":4,"column":37,"nodeType":"66","messageId":"67","endLine":4,"endColumn":41},{"ruleId":"64","severity":1,"message":"78","line":5,"column":7,"nodeType":"66","messageId":"67","endLine":5,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'PropTypes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentAccount'. Either include it or remove the dependency array.","ArrayExpression",["79"],["80"],"'minABI' is defined but never used.","'Tabs' is defined but never used.","'Card' is defined but never used.","'tokenAddress' is assigned a value but never used.",{"desc":"81","fix":"82"},{"desc":"81","fix":"83"},"Update the dependencies array to be: [currentAccount]",{"range":"84","text":"85"},{"range":"86","text":"85"},[559,561],"[currentAccount]",[887,889]]